---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: delete-entities
  title: Deletes root entities for a given yaml file
  description: Example
spec:
  owner: roadie
  type: template
  parameters:
    - title: Entities to delete
      properties:
        catalog-info-url:
          title: Catalog info url
          type: string
          description: The full url to the yaml file you want to remove entities for from the catalog

  steps:
    - id: location
      name: Get Root Location
      action: http:backstage:request
      input:
        method: 'GET'
        path: '/catalog/entities?filter=spec.target=${{ parameters["catalog-info-url"] | replace("/tree/", "/blob/") }}&filter=metadata.annotations.backstage.io/managed-by-location=url:${{ parameters["catalog-info-url"] | replace("/blob/", "/tree/") }}&fields=metadata.uid,metadata.name'
    - id: log-to-delete
      action: debug:log
      input:
        message: 'Found the following entities ${{ steps.location.output.body | json }} with response code ${{ steps.location.output.code }} and message ${{ steps.location.output.message }}'
    - id: parse
      name: Parse entities response
      action: roadiehq:utils:jsonata
      input:
        data: ${{ steps.location.output.body }}
        expression: '$.metadata.{"uid": uid, "name": name}'
    - id: log-to-delete
      action: debug:log
      input:
        message: 'Deleting the following entities: ${{ steps.parse.output.result | selectattr("name") | string }}'
    - id: delete-all
      if: ${{ steps.parse.output.result is not string }}
      name: Delete entities
      each: ${{ steps.parse.output.result }}
      action: http:backstage:request
      input:
        method: 'DELETE'
        path: '/catalog/entities/by-uid/${{ each.value.uid }}'
    - id: delete-one
      if: ${{ steps.parse.output.result is string }}
      name: Delete entity
      action: http:backstage:request
      input:
        method: 'DELETE'
        path: '/catalog/entities/by-uid/${{ steps.parse.output.result.uid }}'
    - id: refresh-all-in-catalog
      name: Refresh all
      if: ${{ steps.parse.output.result is not string }}
      each: ${{ steps.parse.output.result }}
      action: http:backstage:request
      input:
        method: 'POST'
        path: '/catalog-extensions/refresh-state/${{ each.value.uid }}/force-refresh'
        continueOnBadResponse: true
    - id: refresh-catalog
      name: Refresh
      if: ${{ steps.parse.output.result is string }}
      action: http:backstage:request
      input:
        method: 'POST'
        path: '/catalog-extensions/refresh-state/${{ steps.parse.output.result.uid }}/force-refresh'
        continueOnBadResponse: true
    - id: clean-catalog
      name: Clean
      action: http:backstage:request
      input:
        method: 'POST'
        path: '/catalog-extensions/refresh-state/garbage-collection'
        continueOnBadResponse: true
    - id: log-result
      action: debug:log
      input:
        message: 'Deleted the following entities for YAML file ${{ parameters["catalog-info-url"] }} by uuid: ${{ steps.parse.output.result | selectattr("name") | string }}'


  output:
    path: ${{ steps.parse.output.result }}
    getResponse: '{{ steps["delete-root"].output.body }}'
    getCode: '{{ steps["delete-root"].output.code }}'
    getHeaders: '{{ steps["delete-root"].output.headers }}'